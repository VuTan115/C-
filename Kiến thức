                                                    CON TRỎ(POINTER)
- Khái niện về biến:
Biến là tên của một vùng nhớ đc lưu trữ trên 1 "Địa Chỉ" nhất định do thanh Ram cung cấp. Hàng ngày khi thao tác với biến thì ta chỉ thao tác với giá trị của vùng nhớ tại cái "Địa chỉ" mà bộ nhớ cấp phát đấy thôi. Cho đến khi ta học con trỏ thì ta sẽ tìm hiểu xâu hơn về biến là "Địa Chỉ" của biến.

                                                     CON TRỎ LÀ GÌ?
- Khái niệm: Con trỏ trong C++ đơn giản cũng chỉ là một loại "BIẾN" do đó con trỏ cũng có thể đc khai báo
   bằng nhiều kiểu dữ liệu như int, float, string, char...Nhưng ĐIỂM KHÁC BIỆT giữa con trỏ và biến bình thường là các biến bình thường sẽ lưu "Giá Trị" của biến còn con trỏ thì lại lưu "Địa Chỉ" của biến đó.
- Khai báo con trỏ: 
    + <tên kiểu dữ liệu> + "*" +<tên con trỏ>
        int *ptr;// khai báo con trỏ có kiểu dữ liệu int 
        int* ptr;// khai báo biến ptr có kiểu dữ liệu con trỏ
        int * ptr;// khai báo con trỏ có kiểu dữ liệu int. 
    Note: Nhìn có vẻ như 3 cái cách khai báo này giống nhau nhưng bản chất chỉ có cách thứ 2 là  sai.
    khi khai báo 1 con trỏ thì không đc để giá trị của con trỏ bị chống mà phải gán cho nnó 1 địa chỉ nhất định nếu không con trỏ sẽ nhận giá trị rác(giống như 1 biến bình thường khi k đc gán giá trị)
                CÁC TOÁN TỬ TRONG CON TRỎ
            * : toán tử giá trị (toán tử 1 ngôi)
            & : toán tử địa chỉ  (toán tử 1 ngôi)
            *&: GIÁ trị tại địa chỉ của biến = giá trị của biến
            *POINTER: GIÁ TRỊ TẠI ĐỊA CHỈ CỦA CON TRỎ POINTER TRỎ đến
            ta cũng có thể thay đổi giá trị của một biến bằng cách thay đổi giá trị của địa chỉ mà con trỏ trỏ đến 
            VD; int *ptr;
            int a=1;
            ptr=&a;//gán giá trị của con trỏ là địa chỉ của biến a=> ptr là giá trị của con trỏ và bằng địa chỉ của biến a 

            *ptr // giá trị của con trỏ: tức là giá trị tại địa chỉ mà giá trị của con trỏ đang lưu trữ (=a)
                 //  cho nên khi ta thay đổi *ptr tức là ta đang thay đổi giá trị  của biến a
            *ptr +=1;// tăng giá trị của biến a lên 1 
            phép gán *ptr =&a; : là phép toán sai vì *ptr là giá trị của địa chỉ mà con trỏ đang lưu trữ ( có nghĩa là *ptr là kiểu dữ liệu dạng int là kiểu dữ liệu của biến a ) do đó ta không thể gán giá trị của *ptr cho 1 giá trị địa chỉ (&a) nó giống như việc ta đang gán giá trị kiểu double cho giá trị int

                CON TRỎ NULL(0)
-Khái niệm của con trỏ Null là con trỏ tại 1 vùng nhớ chứa toàn giá trị 0
                GIÁ TRỊ CỦA CON TRỎ
- Khi ta khai báo một con trỏ và gán giá trị cho nó thì bản chất là việc ta lấy đỉa chỉ của cái giá trị đó gán cho giá trị của con trỏ.Nhưng con trỏ sẽ vẫn có địa chỉ của nó vì bản chất của con trỏ là 1 biến lên nó sẽ cx có địa chỉ như một bieén thông thường.


continue: khi gặp lệnh continue thì sẽ bỏ qua những câu lệnh đằng sau continue


                                    VECTOR
vector: có đầy đủ tính chất của mảng tĩnh
do cơ chế container lên vector rất tốn bộ nhớ
vector: khi khai báo thì ko cần cấp phát bộ nhớ, nếu ko khai báo các phần tử của mảng vector thì mặc định các phần tử sẽ =0
khai báo: vector<tên kiểu dữ liệu> tên vector ( kiểu dữ liệu có thể là kiểu dữ liệu struc , class, list..)
các hàm trong vector:

arr.resize(số lượng phần tử):cấp phát số lượng phần tử cho mảng 
arr.resize(số lượng phần tử, giá trị của phần tử mặc định)
arr.at(vị trị muốn truy cập)
arr.size():trả về độ dài của vector
arr.push_back(thứ cần thêm vào đít mảng) 
arr.pop_back():xóa thằng  ở cuối mảng
arr.capacity():xuất ra số ô nhớ  của mảng đang dùng
max_size():trả về số lượng mà mảngtối đa có thể chứa được
arr.front><arr.back
arr.begin()
clear():xóa hết vector
arr.insert(arr.begin(),giá trị cần chèn)
arr.insert(arr.begin(),số lần chèn,giá trị cần chèn)
arr.insert(arr.begin(), arr1.begin(),arr1.begin())
arr.swap(arr1):biến arr thành arr1.
===============================================================================================================
========= ƯU ĐIỂM ========= 
1. Vector bản chất là 1 mảng 1 chiều - cụ thể nó là 1 cái mảng động - nó là 1 cái siêu mảng động 
+ Vector có thể chứa các kiểu dữ liệu cơ sở(int, float, double, char...) và kiểu dữ liệu do người lập trình định nghĩa - struct...
TẠI SAO NÓ LÀ SIÊU MẢNG ĐỘNG
+ Vector có hết tất cả các tính chất mà mảng 1 chiều(mảng tĩnh và mảng động) và có thêm 1 số tính chất riêng của nó nữa(khắc phục nhược điểm của mảng tĩnh và mảng động)
+ Nếu như chúng ra dùng mảng tĩnh hay mảng động thì KHAI BÁO KÍCH THƯỚC CỦA MẢNG CẦN THAO TÁC TRƯỚC. Còn vector không cần khai báo trước số lượng phần tử cần dùng - bởi vì nó được hỗ trợ cái cơ chế tự động thêm phần tử vào cuối (push_back())
+ Tự động đi giải phóng vùng nhớ khi chương trình kết thúc
+ Các thao tác thêm, xóa , tìm kiếm, sắp xếp bên mảng 1 chiều (mảng tĩnh hay mảng động) thì chúng ta phải đi cài  - đặt - còn bên vector nó sẽ hỗ trợ chúng ta các hàm xử lí tương tự

========= KHUYẾT ĐIỂM ========= 
- Tốn bộ nhớ hơn mảng tĩnh và mảng động(do cơ chế container buộc phải tạo ra thêm các vùng nhớ riêng để quản lí chặt chẽ hơn) 

Vector, List, Stack, Queue...: thuộc thư viện chuẩn của C++ - STL(Standard Template Library)

#include<vector>


===================== Một số hàm hỗ trợ trên Vector =====================

1/ resize:
- Hàm này có 2 dạng:
	-  resize(<số lượng>): Cấp phát mảng với số lượng phần tử cụ thể cho trước. 

                   	+ Mặc định khi cấp phát với resize là các phần tử đều mang giá trị mặc định ban đầu là 0(giống hàm calloc bên C)
                   	+ Nếu mảng chưa từng được tạo thì sẽ tạo mảng với số lượng cụ thể đó. 
                   	+ Nếu mảng đã được tạo mà tiếp tục resize thì kích thước của mảng sẽ co lại hay dãn ra so với mảng ban đầu. 
                   	+ Nếu là co lại thì 1 số phần tử trong mảng ban đầu sẽ bị mất, nếu là dãn ra thì các phần tử lúc đầu vẫn tiếp tục tồn tại 

	- resize(<số lượng>, <giá trị mặc định>):  

	+ Cấp phát mảng với số lượng phần tử cụ thể cho trước - với giá trị của các phần tử là giá trị mặc định. 
                  	+ Mảng được tạo mới nếu chưa có, nếu đã có rồi mảng sẽ co lại hoặc dãn ra so với mảng ban đầu. 

2/ at(<chỉ số index>): Truy xuất đến phần tử có chỉ số index trong vector.
vd: 
vector a;
cout << a.at(2); // Xuất ra phần tử tại vị trí 2 trong vector. Tương đương như: a[2]. Dùng cách nào cũng được. 
 
3/ size(): Trả về kích thước hiện tại của vector (số lượng các phần tử đang chứa trong vector).

4/ push_back(<Phần tử có kiểu dữ liệu bất kỳ>): Thực hiện đưa phần tử vào cuối vector.

5/ pop_back(): Xóa phần tử cuối cùng trong vector.
 
6/ front(): Trả về phần tử đầu tiên của mảng.

7/ back(): Trả về phần tử cuối cùng của mảng.

8/ capacity(): Trả về kích thước thực sự vector đang lưu trữ (các phần tử).

9/ max_size(): Trả về kích thước tối đa có thể chứa các phần tử của các container.

10/ begin(): Trả về 1 iterator trỏ đến phần tử đầu tiên trong vector (giống pHead bên List)

11/ end(): Trả về 1 iterator trỏ đến phần tử cuối cùng trong vector (giống pTail bên List)

12/ erase: Xóa phần tử trong vector.
- Hàm này có 2 dạng:
	+ Dạng 1: erase(<Tên vector>.begin() + <số nguyên x>): Xóa phần tử tại vị trí x trong mảng (vị trí trong mảng bắt đầu từ 0). 

	+ Dạng 2: erase(<Tên vector>.begin() + <số nguyên x>, <Tên vector>.begin() + <số nguyên y>): Xóa các phần tử của mảng từ vị trí x cho đến vị trí y - 1.

Lưu ý cả 2 trường hợp trên: Nếu vị trí truyền vào không hợp lệ thì chương trình sẽ bị lỗi.

13/ clear(): Xóa tất cả các phần tử hiện có trong vector, vector sau khi thực hiện câu lệnh này sẽ trở thành vector rỗng.

14/ insert: Thêm phần tử vào trong vector.
- Hàm này có 4 dạng:
	+ Dạng 1: insert(<Tên vector>.begin() + <số nguyên x>, <giá trị cần chèn>): Chèn giá trị vào vị trí x trong mảng.
	+ Dạng 2: insert(<Tên vector>.begin() + <số nguyên x>, <số lần chèn y>, <giá trị cần chèn>): Chèn y lần giá trị vào vị trí x trong mảng.
	+ Dạng 3: insert(<Tên vector>.begin() + <số nguyên x>, <Tên vector a>.begin() + <số nguyên y>, <Tên vector a>.begin() + <số nguyên z>): 
                    ---> Lấy các phần tử từ vector a bắt đầu lấy từ vị trí y cho đến vị trí z - 1 và chèn vào vị trí x của vector hiện tại. 
	+ Dạng 4: insert(<Tên vector>.begin() + <số nguyên x>, <Tên mảng a>  + <số nguyên y>, <Tên mảng a>  + <số nguyên z>): 
                   ----> Lấy các phần tử lấy từ mảng a bắt đầu lấy từ vị trí y đến vị trí z - 1 và chèn vào vị trí x của vector hiện tại.

15/ tenvector.swap(<vector x>): Hoán đổi các phần tử của vector hiện tại & vector x cho nhau.

===========================Struc================================
struc cũng là một kiểu dữ liệu
khai báo kiểu dữ liệu struct cũng như khai báo 1 kiểu dữ liệu thông thường
struct <Tên biến> {
    <kiểu dữ liệu> tên Biến
    ....
};\
rand()%(high-low+1)+low;
==========================File==========================================
#include <fstream> // thư viện hỗ trợ việc thao tác với file
ifstream : lớp có khả năng hỗ trợ đọc file
ofstream : lớp có khả năng ghhi dữ liệu vào file